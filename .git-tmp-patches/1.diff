commit f46111b1fef117b8743ba43703435dacbd40a405
Author: parasquid <git@parasquid.com>
Date:   Wed Aug 27 14:32:31 2025 +0800

    fix(sync): sanitize UTF-8 and JSON encoding for logging and DB fields
    
    Why: Prevent crashes on invalid byte sequences (e.g., ASCII-8BIT to UTF-8) when encoding subjects or from-lists during logging and persistence.
    
    What:\n- Add safe_utf8 and safe_json helpers to normalize strings and arrays, replacing invalid/undef bytes.\n- Use helpers for subject, from JSON, message_id, and stored raw payload.\n- Ensure logging and DB record building never raise on encoding issues.

diff --git a/core/sync.rb b/core/sync.rb
index 41b3a77..3906f2a 100755
--- a/core/sync.rb
+++ b/core/sync.rb
@@ -28,6 +28,24 @@ require "ruby-progressbar"
 # Ensure immediate flushing so output appears promptly in Docker
 $stdout.sync = true
 
+# Encode any string-ish value to UTF-8 safely, replacing invalid/undef bytes
+def safe_utf8(value)
+  value.to_s
+    .force_encoding("UTF-8")
+    .encode("UTF-8", "binary", invalid: :replace, undef: :replace, replace: "")
+end
+
+# JSON-encode an Array or scalar after UTF-8 sanitization; never raise
+def safe_json(value)
+  if value.is_a?(Array)
+    value.map { |v| safe_utf8(v) }.to_json
+  else
+    safe_utf8(value).to_json
+  end
+rescue JSON::GeneratorError, Encoding::UndefinedConversionError, Encoding::InvalidByteSequenceError
+  value.is_a?(Array) ? "[]" : "\"\""
+end
+
 # patch only this instance of Net::IMAP::ResponseParser
 def patch(gmail_imap)
   class << gmail_imap.instance_variable_get(:@parser)
@@ -98,10 +116,10 @@ def build_record(imap_address:, mbox_name:, uid:, uidvalidity:, mail:, attrs:, f
     uid: uid,
     uidvalidity: uidvalidity,
 
-    message_id: mail&.message_id&.force_encoding("UTF-8"),
+    message_id: safe_utf8(mail&.message_id),
     date:,
-    from: mail&.from&.to_json&.force_encoding("UTF-8"),
-    subject: mail&.subject&.force_encoding("UTF-8"),
+    from: safe_json(mail&.from),
+    subject: safe_utf8(mail&.subject),
     has_attachments: mail ? mail.has_attachments? : false,
 
     x_gm_labels: attrs["X-GM-LABELS"].to_s.force_encoding("UTF-8"),
@@ -109,17 +127,14 @@ def build_record(imap_address:, mbox_name:, uid:, uidvalidity:, mail:, attrs:, f
     x_gm_thrid: attrs["X-GM-THRID"].to_s.force_encoding("UTF-8"),
     flags: flags_json.force_encoding("UTF-8"),
 
-    encoded: (attrs["BODY[]"] || attrs["RFC822"])
-      .to_s
-      .force_encoding("UTF-8")
-      .encode("UTF-8", "binary", invalid: :replace, undef: :replace, replace: "")
+    encoded: safe_utf8(attrs["BODY[]"] || attrs["RFC822"])
   }
 end
 
 # Log a concise processing line (handles odd headers safely)
 def log_processing(mbox_name:, uid:, mail:, flags_json:, progress: nil)
-  subj = mail&.subject
-  from = mail&.from&.to_json
+  subj = safe_utf8(mail&.subject)
+  from = safe_json(mail&.from)
   suffix = begin
     date = mail&.date
     "sent on #{date}"
